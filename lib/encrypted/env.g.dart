// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env.dart';

// **************************************************************************
// FlutterSecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    224,
    93,
    119,
    39,
    224,
    119,
    116,
    43,
    162,
    102,
    179,
    250,
    168,
    91,
    241,
    231,
    173,
    3,
    2,
    10,
    132,
    215,
    37,
    54,
    85,
    180,
    226,
    30,
    84,
    209,
    78,
    242,
    219,
    12,
    169,
    226,
    43,
    113,
    131,
    241,
    82,
    111,
    166,
    110,
    100,
    182,
    163,
    254,
    54,
    47,
    8,
    234,
    82,
    87,
    139,
    118,
    239,
    175,
    79,
    191,
    177,
    45,
    166,
    252,
    142,
    177,
    23,
    57,
    109,
    75,
    245,
    10,
    178,
    70,
    131,
    190,
    46,
    173,
    126,
    122,
    0,
    195,
    58,
    99,
    176,
    252,
    244,
    67,
    87,
    16,
    119,
    114,
    219,
    192,
    48,
    139,
    6,
    210,
    111,
    168,
    161,
    204,
    95,
    3,
    101,
    178,
    156,
    115,
    14,
    63,
    100,
    132,
    24,
    218,
    222,
    239,
    253,
    19,
    240,
    171,
    62,
    110,
    17,
    73,
    166,
    0,
    182,
    54,
    92,
    253,
    6,
    187,
    79,
    68,
    221,
    208,
    142,
    58,
    130,
    195,
    4,
    53,
    30,
    197,
    232,
    67,
    213,
    30,
    214,
    176,
    66,
    169,
    59,
    46,
    24,
    67,
    50,
    61,
    224,
    49,
    32,
    51,
    105,
    101,
    69,
    35,
    107,
    47,
    105,
    109,
    42,
    194,
    122,
    10,
    188,
    115,
    144,
    68,
    254,
    2,
    238,
    213,
    245,
    144,
    26,
    210,
    200,
    140,
    142,
    134,
    217,
    96,
    80,
    98,
    7,
    64,
    5,
    42,
    21,
    226,
    13,
    74,
    150,
    131,
    90,
    28,
    190,
    43,
    67,
    218,
    192,
    165,
    79,
    58,
    230,
    158,
    1,
    220,
    227,
    32,
    88,
    226,
    130,
    155,
    91,
    253,
    62,
    5,
    129,
    209,
    222,
    132,
    216,
    4,
    187,
    118,
    98,
    88,
    218,
    223,
    69,
    48,
    180,
    64,
    183,
    165,
    117,
    223,
    43,
    3,
    198,
    69,
    111,
    116,
    114,
    52,
    74,
    184,
    189,
    137,
    120,
    87,
    52,
    55,
    4,
    172,
    22,
    75,
    58,
    78,
    214,
    189,
    187,
    148,
    21,
    65,
    69,
    64,
    164,
    20,
    49,
    205,
    36,
    106,
    233,
    19,
    66,
    179,
    99,
    211,
    60,
    246,
    78,
    45,
    231,
    24,
    106,
    103,
    221,
    253,
    149,
    171,
    94,
    221,
    90,
    21,
    187,
    61,
    53,
    130,
    43,
    110,
    156,
    164,
    8,
    56,
    111,
    117,
    16,
    162,
    134,
    109,
    134,
    235,
    108,
    173,
    191,
    141,
    236,
    47,
    37,
    71,
    41,
    77,
    96,
    90,
    138,
    193,
    36,
    65,
    34,
    248,
    92,
    103,
    70,
    188,
    212,
    73,
    174,
    88,
    254,
    41,
    35,
    236,
    187,
    130,
    140,
    159,
    9,
    234,
    15,
    51,
    145,
    122,
    6,
    177,
    236,
    42,
    127,
    141,
    136,
    245,
    196,
    232,
    155,
    28,
    202,
    70,
    119,
    141,
    210,
    67,
    56,
    119,
    245,
    157,
    126,
    255,
    181,
    83,
    31,
    98,
    205,
    176,
    109,
    79,
    173,
    81,
    13,
    178,
    100,
    46,
    255,
    67,
    105,
    86,
    61,
    193,
    202,
    142,
    15,
    54,
    178,
    167,
    19,
    132,
    106,
    153,
    26,
    228,
    94,
    45,
    78,
    101,
    92,
    218,
    18,
    127,
    162,
    186,
    81,
    51,
    194,
    202,
    183,
    136,
    5,
    104,
    10,
    91,
    156,
    84,
    140,
    120,
    191,
    136,
    140,
    142,
  ]);
  @override
  String get firebaseAndroidApiKey => _get('FIREBASE_ANDROID_API_KEY');

  @override
  String get firebaseAndroidAppId => _get('FIREBASE_ANDROID_APP_ID');

  @override
  String get firebaseAndroidMessagingSenderId =>
      _get('FIREBASE_ANDROID_MESSAGING_SENDER_ID');

  @override
  String get firebaseAndroidProjectId => _get('FIREBASE_ANDROID_PROJECT_ID');

  @override
  String get firebaseAndroidStorageBucket =>
      _get('FIREBASE_ANDROID_STORAGE_BUCKET');

  T _get<T>(String key, {T Function(String)? fromString}) {
    T parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted = AESCBCEncrypter.aesCbcDecrypt(
      encryptionKey,
      iv,
      _encryptedValues,
    );
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncrypter.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return parseValue(decryptedValue);
  }
}
